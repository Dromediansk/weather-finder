{"version":3,"sources":["components/Titles.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","lazy","__webpack_require__","e","then","bind","Forecast","API_KEY","App","state","temperature","undefined","city","country","humidity","description","forecastTemp1","forecastTemp2","forecastTemp3","forecastTemp4","forecastTemp5","forecastWeather1","forecastWeather2","forecastWeather3","forecastWeather4","forecastWeather5","error","_callee","api_call","data","api_call_forecast","forecastData","regexDate","regexTime","mapTime","filteredTime","filteredDate","sliceDate","splitDate","concatDate","finalDate","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","list","map","filter","record","dt_txt","match","date","slice","split","substr","_this","setState","Math","round","main","temp","sys","weather","weatherDate1","weatherDate2","weatherDate3","weatherDate4","weatherDate5","stop","this","components_Titles","components_Form","react","fallback","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb1d2de4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <p className=\"title-container__subtitle\">Find out temperature, conditions and more..</p>\r\n    </div>\r\n)\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n        <button>Get weather</button>\r\n    </form>\r\n)\r\n\r\nexport default Form;","import React, { Component, Suspense, lazy } from 'react';\r\nimport './App.css';\r\nimport Titles from './components/Titles';\r\nimport Form from './components/Form';\r\n\r\n//dynamically importing\r\nconst Weather = lazy(() => import('./components/Weather'));\r\nconst Forecast = lazy(() => import('./components/Forecast'));\r\n\r\nconst API_KEY = \"c1158ceab0a07507b4b692350d17ce1c\";\r\n\r\nclass App extends Component {\r\n  // from React v16\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    forecastTemp1: undefined,\r\n    forecastTemp2: undefined,\r\n    forecastTemp3: undefined,\r\n    forecastTemp4: undefined,\r\n    forecastTemp5: undefined,\r\n    forecastWeather1: undefined,\r\n    forecastWeather2: undefined,\r\n    forecastWeather3: undefined,\r\n    forecastWeather4: undefined,\r\n    forecastWeather5: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  // able to use arrow functions in React version higher then 16!\r\n  // does not have to bind functions, 'this' keyword can be used independently\r\n  getWeather = async (e) => {\r\n    //prevent from refreshing the page after update\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n    const data = await api_call.json();\r\n\r\n    const api_call_forecast = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n    const forecastData = await api_call_forecast.json();\r\n\r\n    if (city && country) {\r\n      const regexDate = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\r\n      //filter every day at 12:00\r\n      const regexTime = /12:00:00$/;\r\n      const mapTime = forecastData.list.map(data => data);\r\n      const filteredTime = mapTime.filter(record => record.dt_txt.match(regexTime));\r\n      const filteredDate = filteredTime.map(record => record.dt_txt.match(regexDate));\r\n      const sliceDate = filteredDate.map(date => date[0].slice(5));\r\n      const splitDate = sliceDate.map(date => date.split('-'));\r\n      const concatDate = splitDate.map(date => date[1].concat(date[0]));\r\n      const finalDate = concatDate.map(date => date.substr(0, 2) + '.' + date.substr(2));\r\n\r\n      //setting state\r\n      this.setState({\r\n        temperature: Math.round(data.main.temp),\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description,\r\n        forecastTemp1: Math.round(filteredTime[0].main.temp),\r\n        forecastTemp2: Math.round(filteredTime[1].main.temp),\r\n        forecastTemp3: Math.round(filteredTime[2].main.temp),\r\n        forecastTemp4: Math.round(filteredTime[3].main.temp),\r\n        forecastTemp5: Math.round(filteredTime[4].main.temp),\r\n        forecastWeather1: filteredTime[0].weather[0].main,\r\n        forecastWeather2: filteredTime[1].weather[0].main,\r\n        forecastWeather3: filteredTime[2].weather[0].main,\r\n        forecastWeather4: filteredTime[3].weather[0].main,\r\n        forecastWeather5: filteredTime[4].weather[0].main,\r\n        weatherDate1: finalDate[0],\r\n        weatherDate2: finalDate[1],\r\n        weatherDate3: finalDate[2],\r\n        weatherDate4: finalDate[3],\r\n        weatherDate5: finalDate[4],\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        forecastTemp1: undefined,\r\n        forecastTemp2: undefined,\r\n        forecastTemp3: undefined,\r\n        forecastTemp4: undefined,\r\n        forecastTemp5: undefined,\r\n        forecastWeather1: undefined,\r\n        forecastWeather2: undefined,\r\n        forecastWeather3: undefined,\r\n        forecastWeather4: undefined,\r\n        forecastWeather5: undefined,\r\n        weatherDate1: undefined,\r\n        weatherDate2: undefined,\r\n        weatherDate3: undefined,\r\n        weatherDate4: undefined,\r\n        weatherDate5: undefined,\r\n        error: \"Please enter the value!\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container\">\r\n                  <Titles />\r\n                </div>\r\n                <div className=\"col-xs-7 form-container\">\r\n                  <Form getWeather={this.getWeather} />\r\n                  <div className=\"weather-data\">\r\n                  <Suspense fallback={<div>Loading...</div>}>\r\n                    <Weather \r\n                      temperature={this.state.temperature} \r\n                      humidity={this.state.humidity}\r\n                      city={this.state.city}\r\n                      country={this.state.country}\r\n                      description={this.state.description}\r\n                      error={this.state.error}\r\n                    />\r\n                    <Forecast \r\n                      city={this.state.city}\r\n                      country={this.state.country}\r\n                      forecastTemp1={this.state.forecastTemp1}\r\n                      forecastTemp2={this.state.forecastTemp2}\r\n                      forecastTemp3={this.state.forecastTemp3}\r\n                      forecastTemp4={this.state.forecastTemp4}\r\n                      forecastTemp5={this.state.forecastTemp5}\r\n                      forecastWeather1={this.state.forecastWeather1}\r\n                      forecastWeather2={this.state.forecastWeather2}\r\n                      forecastWeather3={this.state.forecastWeather3}\r\n                      forecastWeather4={this.state.forecastWeather4}\r\n                      forecastWeather5={this.state.forecastWeather5}\r\n                      weatherDate1={this.state.weatherDate1}\r\n                      weatherDate2={this.state.weatherDate2}\r\n                      weatherDate3={this.state.weatherDate3}\r\n                      weatherDate4={this.state.weatherDate4}\r\n                      weatherDate5={this.state.weatherDate5}\r\n                    />\r\n                  </Suspense>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}